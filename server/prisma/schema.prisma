// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  name             String
  email            String?        @unique
  totalXp          Int            @default(0) @map("total_xp")
  currentStreak    Int            @default(0) @map("current_streak")
  bestStreak       Int            @default(0) @map("best_streak")
  lastActivityDate DateTime?      @map("last_activity_date")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  passwordHash     String?        @map("password_hash")
  submissions      Submission[]
  progresses       UserProgress[]

  @@map("users")
}

model Lesson {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  orderIndex  Int      @default(0) @map("order_index")
  createdAt   DateTime @default(now()) @map("created_at")

  problems    Problem[]
  submissions Submission[]
  progresses  UserProgress[]

  @@map("lessons")
}

model Problem {
  id            Int    @id @default(autoincrement())
  lessonId      Int    @map("lesson_id")
  type          String
  question      String
  correctAnswer String @map("correct_answer")
  xpValue       Int    @default(10) @map("xp_value")
  orderIndex    Int    @default(0) @map("order_index")

  lesson      Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  options     ProblemOption[]
  submissions Submission[]

  @@map("problems")
}

model ProblemOption {
  id         Int     @id @default(autoincrement())
  problemId  Int     @map("problem_id")
  optionText String  @map("option_text")
  isCorrect  Boolean @default(false) @map("is_correct")

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@map("problem_options")
}

model Submission {
  id         Int      @id @default(autoincrement())
  attemptId  String   @map("attempt_id")
  userId     Int      @map("user_id")
  lessonId   Int      @map("lesson_id")
  problemId  Int      @map("problem_id")
  userAnswer String   @map("user_answer")
  isCorrect  Boolean  @map("is_correct")
  xpAwarded  Int      @default(0) @map("xp_awarded")
  createdAt  DateTime @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson  Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  // Ensure one submission per problem per attempt
  @@unique([attemptId, problemId])
  @@map("submissions")
}

model UserProgress {
  id                Int       @id @default(autoincrement())
  userId            Int       @map("user_id")
  lessonId          Int       @map("lesson_id")
  problemsCompleted Int       @default(0) @map("problems_completed")
  totalProblems     Int       @default(0) @map("total_problems")
  progressPercent   Decimal   @default(0.00) @map("progress_percent") @db.Decimal(5, 2)
  completed         Boolean   @default(false)
  lastAttemptAt     DateTime? @map("last_attempt_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_progress")
}
